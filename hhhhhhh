# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: adraji <adraji@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/10/31 15:47:54 by adraji            #+#    #+#              #
#    Updated: 2025/10/31 16:11:20 by adraji           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME		= libftprintf.a
HEADER		= ft_printf.h

LIBFT_DIR	= libft
LIBFT		= $(LIBFT_DIR)/libft.a

CC			= cc
CFLAGS		= -Wall -Wextra -Werror -I $(LIBFT_DIR) -I .

SRC_LIBFT	= ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c ft_memchr.c ft_memcmp.c \
			  ft_strlen.c ft_strlcpy.c ft_strlcat.c ft_strchr.c ft_strrchr.c ft_strncmp.c \
			  ft_strnstr.c ft_strdup.c ft_substr.c ft_strjoin.c ft_strtrim.c ft_split.c \
			  ft_strmapi.c ft_striteri.c ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c \
			  ft_isprint.c ft_toupper.c ft_tolower.c ft_atoi.c ft_itoa.c ft_putchar_fd.c \
			  ft_putstr_fd.c ft_putendl_fd.c ft_putnbr_fd.c ft_calloc.c ft_lstnew_bonus.c \
			  ft_lstadd_front_bonus.c ft_lstsize_bonus.c ft_lstlast_bonus.c ft_lstadd_back_bonus.c \
			  ft_lstdelone_bonus.c ft_lstclear_bonus.c ft_lstiter_bonus.c ft_lstmap_bonus.c

SRC			= $(addprefix $(LIBFT_DIR)/, $(SRC_LIBFT)) ft_printf.c ft_putchar.c ft_putstr.c ft_utoa.c \
			  ft_hexa.c ft_address.c

OBJ			= $(SRC:%.c=%.o)

all: $(NAME)

$(NAME): $(OBJ)
	@ar rcs $(NAME) $(OBJ)

%.o: %.c $(HEADER)
	@$(CC) $(CFLAGS) -c $< -o $@

clean:
	@rm -f $(OBJ)

fclean: clean
	@rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_address.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: adraji <adraji@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/31 01:09:48 by adraji            #+#    #+#             */
/*   Updated: 2025/10/31 16:55:57 by adraji           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"
#include "libft/libft.h"

static int	ft_addresslen(size_t n)
{
	int len;

	len = 0;
	while (n > 0)
	{
		n /= 16;
		len++;
	}
	return (len);
}

char	*ft_address(void *p)
{
	int 	i;
	int 	len;
	char	*add;
	size_t	address;

	if (!p)
		return (ft_strdup("(nil)"));
	address = (size_t)p;
	len = 2 + ft_addresslen(address);
	add = malloc(sizeof(char) * (len + 1));
	if (!add)
		return (NULL);
	add[0] = '0';
	add[1] = 'x';
	i = len - 1;
	while (i > 1)
	{
		add[i--] = "0123456789abcdef"[address % 16];
		address /= 16;
	}
	add[len] = '\0';
	return (add);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_hexa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: adraji <adraji@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/31 01:09:54 by adraji            #+#    #+#             */
/*   Updated: 2025/10/31 16:56:06 by adraji           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"
#include "libft.h"

static int	ft_hexalen(unsigned int n)
{
	int len;

	len = 0;
	while (n > 0)
	{
		n /= 16;
		len++;
	}
	return (len);
}

static char	*ft_fillhexa(char *hexa, unsigned int n, char *lowup)
{
	int	i;
	int	len;

	len = ft_hexalen(n);
	i = len - 1;
	if (i > 0)
	{
		hexa[i--] = lowup[n % 16];
		n /= 16;
	}
	hexa[len] = '\0';
	return (hexa);
}

char	*ft_hexa(unsigned int n, char x)
{
	int		len;
	char	*hexa;

	len = ft_hexalen(n);
	if (!n)
		return (ft_strdup("0"));
	hexa = malloc(len + 1);
	if (!hexa)
		return (NULL);
	if (x == 'X')
		ft_fillhexa(hexa, n, "0123456789ABCDEF");
	else
		ft_fillhexa(hexa, n, "0123456789abcdef");
	return (hexa);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: adraji <adraji@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/31 01:09:40 by adraji            #+#    #+#             */
/*   Updated: 2025/10/31 16:56:09 by adraji           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"
#include "libft.h"

static int	ft_switch(va_list args, char fms)
{
	if (fms == 'd' || fms == 'i')
		return (ft_putstr(ft_itoa(va_arg(args, int))));
	else if (fms == 'u')
		return (ft_putstr(ft_utoa(va_arg(args, unsigned int))));
	else if (fms == 'c')
		return (ft_putchar(va_arg(args, int)));
	else if (fms == 's')
		return (ft_putstr(ft_strdup(va_arg(args, char *))));
	else if (fms == 'p')
		return (ft_putstr(ft_address(va_arg(args, void *))));
	else if (fms == 'x' || fms == 'X')
		return (ft_putstr(ft_hexa(va_arg(args, unsigned int), fms)));
	else if (fms == '%')
		return (ft_putchar('%'));
	return (0);
}

int	ft_printf(const char *fms, ...)
{
	va_list	args;
	size_t	i;
	int		count;

	if (!fms)
		return (-1);
	i = 0;
	count = 0;
	va_start(args, fms);
	while (fms[i])
	{
		if (fms[i] != '%')
			count += ft_putchar(fms[i]);
		// else if (fms[i + 1] == ' ' || fms[i + 1] == '.' ||
		// 	fms[i + 1] == '-' || fms[i + 1] == '#' || ft_isdigit(fms[i + 1]))
		// 	count += ft_printf_bonus(args, &fms[++i]);
		else if (fms[i + 1])
			count += ft_switch(args, fms[++i]);
		i++;
	}
	va_end(args);
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: adraji <adraji@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/31 01:09:44 by adraji            #+#    #+#             */
/*   Updated: 2025/10/31 16:11:45 by adraji           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PRINTF_H
# define PRINTF_H

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdarg.h>

int		ft_putstr(char *s);
int		ft_putchar(char c);
int		ft_printf(const char *fms, ...);
char	*ft_address(void *p);
char	*ft_utoa(unsigned int n);
char	*ft_hexa(unsigned int n, char x);

#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: adraji <adraji@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/31 01:09:51 by adraji            #+#    #+#             */
/*   Updated: 2025/10/31 16:56:16 by adraji           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"
#include "libft.h"

int	ft_putchar(char c)
{
	write (1, &c, 1);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: adraji <adraji@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/31 01:10:01 by adraji            #+#    #+#             */
/*   Updated: 2025/10/31 16:56:18 by adraji           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"
#include "libft.h"

int	ft_putstr(char *s)
{
	int	count;

	count = 0;
	if (!s)
	{
		write(1, "(null)", 6);
		return (6);
	}
	while (s[count])
		ft_putchar(s[count++]);
	free(s);
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_utoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: adraji <adraji@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/10/16 20:34:54 by adraji            #+#    #+#             */
/*   Updated: 2025/10/31 17:15:01 by adraji           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"
#include "libft.h"

static size_t	ft_nbrlen(unsigned int n)
{
	size_t	size;

	if (n == 0)
		return (1);
	size = 0;
	while (n > 0)
	{
		n /= 10;
		size++;
	}
	return (size);
}

static void	ft_revers(char *s)
{
	int		i;
	int		j;
	char	t;

	i = 0;
	j = ft_strlen(s) - 1;
	while (i < j)
	{
		t = s[i];
		s[i++] = s[j];
		s[j--] = t;
	}
}

// adraji

char	*ft_utoa(unsigned int n)
{
	char	*nb;
	int		i;

	nb = malloc(sizeof(char) * (ft_nbrlen(n) + 1));
	if (!nb)
		return (NULL);
	i = 0;
	if (n == 0)
		nb[i++] = '0';
	while (n > 0)
	{
		nb[i++] = (n % 10) + '0';
		n /= 10;
	}
	nb[i] = '\0';
	ft_revers(nb);
	return (nb);
}

/***************************************************************************************
|										       |
|   	    THIS MAIN TEST ONLY MANDATORY PART - BONUS PART IS EXECLUDED               |
|   libft.h in my libftprintf.h should called "libft/" in the root of your repository  |
|										       |
***************************************************************************************/
#include "ft_printf.h"
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#include <time.h>
#include <stdint.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

#define TEST_COUNT 1000
#define STR_COUNT 5

int main(void)
{
    int ret_std, ret_ft;
    srand(time(NULL));

    const char *samples[STR_COUNT] = {"", "hello", "world", "ft_printf", NULL};

    printf("===== SUPER MULTI-STRING STRESS TEST =====\n\n");

    for (int i = 0; i < TEST_COUNT; i++) {
        int di = rand() % (INT_MAX / 2) - (INT_MAX / 4);
        unsigned int u = rand();
        char c = (char)(rand() % 128);
        const char *s1 = samples[rand() % STR_COUNT];
        const char *s2 = samples[rand() % STR_COUNT];
        const char *s3 = samples[rand() % STR_COUNT];
        void *p = (i % 10 == 0) ? NULL : (void *)(uintptr_t)(rand() % 0xFFFFF);
        unsigned int x = rand();
        unsigned int X = rand();

        ret_std = printf(
            "std %%d %%u %%c %%s %%s %%s %%p %%x %%X: |%d|%u|%c|%s|%s|%s|%p|%x|%X|\n",
            di, u, c,
            s1 ? s1 : "(null)",
            s2 ? s2 : "(null)",
            s3 ? s3 : "(null)",
            p, x, X
        );

        ret_ft = ft_printf(
            "ft  %%d %%u %%c %%s %%s %%s %%p %%x %%X: |%d|%u|%c|%s|%s|%s|%p|%x|%X|\n",
            di, u, c, s1, s2, s3, p, x, X
        );

        if (ret_std != ret_ft) {
            int fd = open("error.txt", O_RDWR | O_CREAT | O_APPEND, 0777);
            if (fd == -1)
                return 1;

            int save = dup(1);          // حفظ stdout الأصلي
            dup2(fd, 1);                // توجيه الإخراج إلى الملف
            printf("std  %%d %%u %%c %%s %%s %%s %%p %%x %%X: |%d|%u|%c|%s|%s|%s|%p|%x|%X|\n", di, u, c, s1, s2, s3, p, x, X);
            ft_printf("ft   %%d %%u %%c %%s %%s %%s %%p %%x %%X: |%d|%u|%c|%s|%s|%s|%p|%x|%X|\n", di, u, c, s1, s2, s3, p, x, X);
            printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! RET MISMATCH at iteration %d !!!\n", i);
            printf("ft:%d\nstd:%d\n", ret_ft, ret_std);

            fflush(stdout);             // تأكيد الكتابة في الملف
            dup2(save, 1);              // استرجاع stdout كما كان
            close(fd);
            close(save);
        }
    }

    printf("===== MULTI-STRING STRESS TEST COMPLETE =====\n");
    return 0;
}
